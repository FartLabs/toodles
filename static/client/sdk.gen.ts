// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetApiTodosData, GetApiTodosResponse, PostApiTodosData, DeleteApiTodosByIdData, GetApiTodosByIdData, GetApiTodosByIdResponse, PostApiTodosByIdData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getApiTodos = <ThrowOnError extends boolean = false>(options?: Options<GetApiTodosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiTodosResponse, unknown, ThrowOnError>({
        url: '/api/todos',
        ...options
    });
};

export const postApiTodos = <ThrowOnError extends boolean = false>(options?: Options<PostApiTodosData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/todos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiTodosById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiTodosByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/api/todos/{id}',
        ...options
    });
};

export const getApiTodosById = <ThrowOnError extends boolean = false>(options: Options<GetApiTodosByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiTodosByIdResponse, unknown, ThrowOnError>({
        url: '/api/todos/{id}',
        ...options
    });
};

export const postApiTodosById = <ThrowOnError extends boolean = false>(options: Options<PostApiTodosByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/todos/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};